// <auto-generated />
using System;
using System.Collections.Generic;
using ConvertaApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConvertaApi.Migrations
{
    [DbContext(typeof(ConvertaContext))]
    partial class ConvertaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConvertaApi.Models.CustomData", b =>
                {
                    b.Property<Guid>("MetaEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("MetaEventId");

                    b.ToTable("CustomData");
                });

            modelBuilder.Entity("ConvertaApi.Models.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<List<string>>("Email")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "em");

                    b.Property<List<string>>("IPAddress")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "client_ip_address");

                    b.Property<bool>("IsConverted")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Phone")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "ph");

                    b.Property<string>("PixelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("UserAgent")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "client_user_agent");

                    b.HasKey("Id");

                    b.HasIndex("PixelId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("ConvertaApi.Models.MetaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "event_name");

                    b.Property<string>("PixelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "event_source_url");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "event_time");

                    b.Property<bool>("isRevisit")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("PixelId");

                    b.ToTable("MetaEvent");
                });

            modelBuilder.Entity("ConvertaApi.Models.Pixel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PixelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pixel");
                });

            modelBuilder.Entity("ConvertaApi.Models.UserData", b =>
                {
                    b.Property<Guid>("MetaEventId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Email")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "em");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_ip_address");

                    b.Property<List<string>>("Phone")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "ph");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_user_agent");

                    b.HasKey("MetaEventId");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("ConvertaApi.Models.CustomData", b =>
                {
                    b.HasOne("ConvertaApi.Models.MetaEvent", null)
                        .WithOne("CustomData")
                        .HasForeignKey("ConvertaApi.Models.CustomData", "MetaEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConvertaApi.Models.Lead", b =>
                {
                    b.HasOne("ConvertaApi.Models.Pixel", null)
                        .WithMany()
                        .HasForeignKey("PixelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConvertaApi.Models.MetaEvent", b =>
                {
                    b.HasOne("ConvertaApi.Models.Lead", null)
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConvertaApi.Models.Pixel", null)
                        .WithMany()
                        .HasForeignKey("PixelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConvertaApi.Models.UserData", b =>
                {
                    b.HasOne("ConvertaApi.Models.MetaEvent", null)
                        .WithOne("UserData")
                        .HasForeignKey("ConvertaApi.Models.UserData", "MetaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConvertaApi.Models.MetaEvent", b =>
                {
                    b.Navigation("CustomData");

                    b.Navigation("UserData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
